(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{601:function(a,t,r){"use strict";r.r(t);var v=r(17),_=Object(v.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"manacher算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#manacher算法"}},[a._v("#")]),a._v(" Manacher算法")]),a._v(" "),t("p",[a._v("跟kmp一样,每年大厂必考的一道题.又频繁又噩梦.")]),a._v(" "),t("p",[a._v("manacher是一个加速回文的算法,暴力回文算法复杂度是O(N^2),manacher可以做到O(N).神奇")]),a._v(" "),t("p",[a._v("最长回文子串,子串,一定是连续的.")]),a._v(" "),t("h3",{attrs:{id:"暴力算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#暴力算法"}},[a._v("#")]),a._v(" 暴力算法")]),a._v(" "),t("p",[a._v("我们遍历字符串每个位置,然后i-1判断是否等于i+1位置,如果等,那就i-2是否等于i+2,一直下去,记录每个i位置最大的回文子串长度.")]),a._v(" "),t("p",[a._v("但是我们发现,有个问题,偶数的时候,我们找不到,是在虚轴上的时候,才能找到,但是我们不会遍历到这个虚轴,怎么办.")]),a._v(" "),t("p",[a._v("我们给他加工下,每个字符中间用#包起来,例如12321变成#1#2#3#2#1#,这样,不管是真实字符,还是虚轴,我们都会遍历到.那么这个字符一定要用#吗?还是任意都行?我们观察下会发现,真实字符,只会和真实字符比,#只会和#比,所以,是什么都行.")]),a._v(" "),t("h3",{attrs:{id:"manacher算法核心"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#manacher算法核心"}},[a._v("#")]),a._v(" Manacher算法核心")]),a._v(" "),t("p",[a._v("1）理解回文半径数组,,, i位置,回文半径,每个位置的回文半径")]),a._v(" "),t("p",[a._v("2）理解所有中心的回文最右边界R，和取得R时的中心点C")]),a._v(" "),t("p",[a._v("3）理解   L…(i`)…C…(i)…R  的结构，以及根据i’回文长度进行的状况划分")]),a._v(" "),t("p",[a._v("4）每一种情况划分，都可以加速求解i回文半径的过程")]),a._v(" "),t("h3",{attrs:{id:"实际情况分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实际情况分析"}},[a._v("#")]),a._v(" 实际情况分析")]),a._v(" "),t("ol",[t("li",[a._v("i的位置没有被R罩住,那么没办法加速,只能暴力的,一个个对比.")]),a._v(" "),t("li",[a._v("i被R罩住,可以加速\n1.")])])])}),[],!1,null,null,null);t.default=_.exports}}]);